trigger:
- master

jobs:

- job: 'BuildTest'
  displayName: 'Build and test'

  strategy:
    matrix:
      LinuxNode8:
        nodeVersion: '8'
      LinuxNode10:
        nodeVersion: '10'
      LinuxNode12:
        nodeVersion: '12'

  pool:
    imageName: 'ubuntu-18.04'

  steps:
  - task: NodeTool@0
    inputs:
      versionSpec: '$(nodeVersion).x'
    displayName: 'Install Node.js'

  - script: |
      npm ci
      npm run build
    displayName: 'Build'

  - bash: |
      # Allow writing test/output.html
      sudo chmod 777 test
      # To debug, run `./test/run.sh -d`
      ./test/run.sh
    displayName: 'Test'

  - task: PublishTestResults@2
    condition: succeededOrFailed()
    inputs:
      testRunner: JUnit
      testResultsFiles: 'test/TESTS-*.xml'

  - task: PublishPipelineArtifact@0
    condition: succeededOrFailed()
    inputs:
      artifactName: 'Node$(nodeVersion)TestOutput'
      targetPath: './test/output.html'

- job: 'Build'
  displayName: 'Build'

  strategy:
    matrix:
      macOSNode8:
        imageName: 'macos-10.15'
        nodeVersion: '8'
      macOSNode10:
        imageName: 'macos-10.15'
        nodeVersion: '10'
      macOSNode12:
        imageName: 'macos-10.15'
        nodeVersion: '12'
      WindowsNode8:
        imageName: 'windows-2019'
        nodeVersion: '8'
      WindowsNode10:
        imageName: 'windows-2019'
        nodeVersion: '10'
      WindowsNode12:
        imageName: 'windows-2019'
        nodeVersion: '12'

  pool:
    imageName: $(imageName)

  steps:
  - task: NodeTool@0
    inputs:
      versionSpec: '$(nodeVersion).x'
    displayName: 'Install Node.js'

  - script: |
      npm ci
      npm run build
    displayName: 'Build'
